#!/usr/bin/env ruby

require 'logger'
require 'fileutils'
require "uri"

RAILS_ENV = "production"
RAILS_ROOT = FileUtils.pwd
RAILS_DEFAULT_LOGGER = Logger.new(STDOUT)

$: << File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'crashlog'
require File.expand_path('../../rails/init', __FILE__)

fail "Please supply an API Key as the first argument" if ARGV.empty?

host = ARGV[3]
host ||= "stdin.crashlog.io"

secure = (ARGV[2] == "secure")

class SimulatedExceptionRaiser
  attr_reader :secure

  def initialize(secure)
    @secure = secure
    break_things
  rescue => e
    CrashLog.notify(e)
  end

  def break_things
    raise "Testing crashlog notifier with secure = #{secure}. If you can see this, it works."
  end
end

CrashLog.configure(true) do |config|
  config.api_key = ARGV[0]
  config.secret  = ARGV[1]
  config.scheme  = secure ? 'https' : 'http'
  config.host    = URI.parse(host).host
  config.port    = URI.parse(host).port
  config.development_mode = true
  # config.service_name = 'Staging'
end

puts "Configuration:"
CrashLog.configuration.each do |key, value|
  puts sprintf("%25s: %s", key.to_s, value.inspect.slice(0, 55))
end
puts "Sending #{secure ? "" : "in"}secure notification to project with key #{ARGV.first}"

SimulatedExceptionRaiser.new(secure)
